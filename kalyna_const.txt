SEE: https://www.cryptopp.com/wiki/Kalyna
SEE: https://github.com/maxkrivich/kalyna-fork/blob/master/src/tables.c

In n the "A New Encryption Standard of Ukraine: The Kalyna Block Cipher" document what does Substitution −1π0 S-boxes represent? Where should I put those values in kalyna_constants.h?

The Substitution −1π0 S-boxes in the "A New Encryption Standard of Ukraine: The Kalyna Block Cipher" document represent the inverse substitution boxes used during the decryption process of the Kalyna block cipher.

During encryption, the Kalyna cipher uses the S-boxes to perform a substitution step, where bytes are replaced according to a lookup table (S-boxes). The Inverse S-boxes are used for the reverse substitution step during decryption to get back the original data from the ciphertext. The purpose of the inverse S-box is to reverse the substitution performed by the corresponding S-box during the encryption process.

In the kalyna_constants.h file, you should define a separate array for these inverse S-box values, similar to how you define the original S-box. You can name it something like KALYNA_INV_SBOX. This inverse S-box will be used in the kalyna_transform.cpp file during the decryption process.

Here is an example of how you might define the inverse S-box in kalyna_constants.h:

static const uint8_t KALYNA_INV_SBOX[256] = {
    // Put the values of the inverse S-box here
    // ...
};


And you would use this array in the decryption function within the kalyna_transform.cpp file when you need to perform the inverse substitution step.

Where can we find the Kalyna MDS matrix constants used in key expansion? They don't appear to be listed in "A New Encryption Standard of Ukraine: The Kalyna Block Cipher" document. Do we have to compute these values via mathematical formula and rotations found therein?

You are correct that the "A New Encryption Standard of Ukraine: The Kalyna Block Cipher" document does not explicitly provide the values for the MDS (Maximum Distance Separable) matrix. However, it does provide information on how the MDS matrix is derived.

In the Kalyna specification, the MDS matrix is based on Reed-Solomon codes, and the elements of the MDS matrix are elements of the Galois Field GF(2^8) represented as polynomials over GF(2). The document provides the mathematical background for constructing the MDS matrix but does not list the matrix elements explicitly.

To construct the MDS matrix for use in Kalyna's key expansion, you'll need to implement the mathematical operations over the Galois Field GF(2^8) as outlined in the document and use them to derive the matrix.

Here's a rough outline of steps you might take to compute the MDS matrix:

1. Implement multiplication in GF(2^8). This typically involves using a logarithm and exponentiation table for the field.

2. Compute the matrix elements using the mathematical background provided in the specification.

3. Create a 2D array to store the MDS matrix in your implementation.

It's worth noting that, because the MDS matrix is constant, you only need to compute it once. Once you have the values, you can hard-code them into your implementation as a constant array, similar to how S-boxes are included.

Also, there's a possibility that the Kalyna MDS matrix or its implementation might be available in open-source libraries or forums where cryptographic algorithms are discussed, as the Kalyna cipher is now part of the national standard of Ukraine.


